To migrate data from previous version dump the data into the data folder
with the names mentioned below. Load the files in the following way:

1. Do this before installing the new version with >>> sh install_all.sh
2. python manage.py dumpdata dashboard --all --settings="geonition.***" > ../data/dashboard.json

STEP BY STEP:
1. git clone releases from github
2. sh install_all.sh --> installs django and everything
3. create a settings_<site>.py file for the site you are going to use
4. add to settings_<site>.py database, admins, debug, time_zone, language_code,
languages, MEDIA_ROOT, EMAIL_BACKEND and other email settings
5. copy gntimages (base images) to MEDIA_ROOT
6. set SPATIAL_REFERENCE_SYSTEM_ID to the right value (e.g. 3067)
7. Write a javascript file with your analytics script for the installation
8. set ANALYTICS_TEMPLATE to the template file where you have your analytics script
9. python manage.py syncdb --settings="geonition.settings_<site>"
10. python manage.py collectstatic --settings="geonition.settings_<site>"
11. python manage.py test --settings="geonition.settings_<site>" #should pass all the tests

Finnish the migration steps:
3. Drop the rows in dashboard_project tooltip*
4. Add a new row in dashboard_project called modify_date with default now() and NOT NULL
5. Remove the default now() option
6. run python manage.py data_migrate <absolute path to data dump folder> --settings="<settings for site>"

And now everything should be up and running.


Do not use migrate data but use these SQL commands to modify your database (data migrate is supposed to be updated and do just this instead):
ALTER TABLE geoforms_questionnaire ADD COLUMN "show_area" boolean NOT NULL DEFAULT false;
ALTER TABLE geoforms_questionnaire ADD COLUMN "buffer_area" integer NOT NULL DEFAULT 0;
