Before installing the geonition packages make sure that you have installed geoDjango and the required dependencies for geoDjango.

To migrate data from previous version dump the data into the data folder
with the names mentioned below. Load the files in the following way:

1. Do this before installing the new version with >>> sh install_all.sh
2. python manage.py dumpdata dashboard --all --settings="geonition.***" > ../data/dashboard.json

STEP BY STEP:
1. git clone releases from github
2. if not allready installed, install libxml2-dev and libxslt-dev
3. pip install -r requirements.txt
4. create a settings_<site>.py file for the site you are going to use
5. add to settings_<site>.py database, admins, debug, time_zone, language_code,
languages, MEDIA_ROOT, EMAIL_BACKEND and other email settings
6. If language not in Django-base languages set LOCALE_PATHS setting
7. copy gntimages (base images) to MEDIA_ROOT
8. set SPATIAL_REFERENCE_SYSTEM_ID to the right value (e.g. 3067)
9. Write a javascript file with your analytics script for the installation
10. set ANALYTICS_TEMPLATE to the template file where you have your analytics script
11. python manage.py syncdb --settings="geonition.settings_<site>" (run this command twice, as the views of geodjango models cannot be created with custom sql,
in django version 1.5 the python manage.py syncdb --no-initial-data can be used for the first run)
12. python manage.py collectstatic --settings="geonition.settings_<site>"
13. python manage.py test --settings="geonition.settings_<site>" #should pass all the tests

Finnish the migration steps:
3. Drop the rows in dashboard_project tooltip*
4. Add a new row in dashboard_project called modify_date with default now() and NOT NULL
5. Remove the default now() option
6. run python manage.py data_migrate <absolute path to data dump folder> --settings="<settings for site>"

And now everything should be up and running.

/* For the current release use these DB ALTER scripts */

Attribution is added to the maps application
ALTER TABLE maps_layer ADD COLUMN "attr_title" varchar(100) NOT NULL DEFAULT '';
ALTER TABLE maps_layer ADD COLUMN "attr_url" varchar(200) NOT NULL DEFAULT '';
ALTER TABLE maps_layer ADD COLUMN "attr_logo_url" varchar(200) NOT NULL DEFAULT '';
ALTER TABLE maps_layer ADD COLUMN "attr_logo_format" varchar(30) NOT NULL DEFAULT '';
ALTER TABLE maps_layer ADD COLUMN "attr_logo_height" integer;
ALTER TABLE maps_layer ADD COLUMN "attr_logo_width" integer;

Questionnaire start and end dates are added to the geoforms application
DB ALTER commands
ALTER TABLE geoforms_questionnaire ADD COLUMN "start_date" date;
ALTER TABLE geoforms_questionnaire ADD COLUMN "end_date" date;
ALTER TABLE geoforms_questionnaire ADD COLUMN "map" varchar(50);
ALTER TABLE geoforms_questionnaire ADD COLUMN "description" text NOT NULL DEFAULT '';
SELECT AddGeometryColumn('geoforms_questionnaire', 'annotation_areas', 4326, 'MULTIPOLYGON', 2);
CREATE INDEX "geoforms_questionnaire_annotation_areas_id" ON "geoforms_questionnaire" USING GIST ( "annotation_areas" GIST_GEOMETRY_OPS );
python manage.py sync_translation_fields --settings="geonition.settings_<site>"

Questionnaire start and end dates are added to the planproposals application
DB ALTER commands
ALTER TABLE plan_proposals_planningproject ADD COLUMN "start_date" date;
ALTER TABLE plan_proposals_planningproject ADD COLUMN "end_date" date;
ALTER TABLE plan_proposals_planningproject ADD COLUMN "map" varchar(50);
ALTER TABLE plan_proposals_planningproject ADD COLUMN "description" text NOT NULL DEFAULT '';
python manage.py sync_translation_fields --settings="geonition.settings_<site>"


and run
python manage.py syncdb --settings="geonition.settings_<site>" to re-create necessary tables


